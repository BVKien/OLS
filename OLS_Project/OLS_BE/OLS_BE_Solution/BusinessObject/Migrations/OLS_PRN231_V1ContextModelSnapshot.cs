// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(OLS_PRN231_V1Context))]
    partial class OLS_PRN231_V1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"), 1L, 1);

                    b.Property<string>("ContentFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IsTrue")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("Question_QuestionID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionQuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.AskAndReply", b =>
                {
                    b.Property<int>("AskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AskId"), 1L, 1);

                    b.Property<string>("ContentFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiscussDiscussId")
                        .HasColumnType("int")
                        .HasColumnName("Discuss_DiscussID");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplyForAskId")
                        .HasColumnType("int")
                        .HasColumnName("ReplyForAskID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("AskId");

                    b.HasIndex("DiscussDiscussId");

                    b.HasIndex("ReplyForAskId");

                    b.HasIndex("UserUserId");

                    b.ToTable("AskAndReply", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"), 1L, 1);

                    b.Property<string>("BlogContent")
                        .HasColumnType("text");

                    b.Property<string>("BlogImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("BlogTagBlogTagId")
                        .HasColumnType("int")
                        .HasColumnName("BlogTag_BlogTagID");

                    b.Property<string>("BlogTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("BlogTopicBlogTopicId")
                        .HasColumnType("int")
                        .HasColumnName("BlogTopic_BlogTopicID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("ReadTime")
                        .HasColumnType("time");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogTagBlogTagId");

                    b.HasIndex("BlogTopicBlogTopicId");

                    b.HasIndex("UserUserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BlogComment", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogCommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCommentId"), 1L, 1);

                    b.Property<int?>("BlogBlogId")
                        .HasColumnType("int")
                        .HasColumnName("Blog_BlogID");

                    b.Property<string>("ContentFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplyForCommentId")
                        .HasColumnType("int")
                        .HasColumnName("ReplyForCommentID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("BlogCommentId");

                    b.HasIndex("BlogBlogId");

                    b.HasIndex("ReplyForCommentId");

                    b.HasIndex("UserUserId");

                    b.ToTable("BlogComment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BlogTag", b =>
                {
                    b.Property<int>("BlogTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogTagId"), 1L, 1);

                    b.Property<string>("BlogTagName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlogTagId");

                    b.ToTable("BlogTag", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BlogTopic", b =>
                {
                    b.Property<int>("BlogTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogTopicID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogTopicId"), 1L, 1);

                    b.Property<string>("BlogTopicName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlogTopicId");

                    b.ToTable("BlogTopic", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChapterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("ChapterName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CourseCourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_CourseID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseCourseId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseInfomation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CourseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Fee")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LearningPathLearningPathId")
                        .HasColumnType("int")
                        .HasColumnName("LearningPath_LearningPathID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.Property<string>("VideoIntro")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CourseId");

                    b.HasIndex("LearningPathLearningPathId");

                    b.HasIndex("UserUserId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CourseEnrolled", b =>
                {
                    b.Property<int>("CourseEnrolledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseEnrolledID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseEnrolledId"), 1L, 1);

                    b.Property<int>("CourseCourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_CourseID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EnrolledDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("CourseEnrolledId");

                    b.HasIndex("CourseCourseId");

                    b.HasIndex("UserUserId");

                    b.ToTable("CourseEnrolled", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Discuss", b =>
                {
                    b.Property<int>("DiscussId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscussID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LessonLessonId")
                        .HasColumnType("int")
                        .HasColumnName("Lesson_LessonID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DiscussId");

                    b.HasIndex("LessonLessonId");

                    b.ToTable("Discuss", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<int?>("CourseCourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_CourseID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FeedbackContent")
                        .HasColumnType("text");

                    b.Property<string>("RateStar")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CourseCourseId");

                    b.HasIndex("UserUserId");

                    b.ToTable("FeedBack", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.LearningPath", b =>
                {
                    b.Property<int>("LearningPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LearningPathID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningPathId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LearningPathName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LearningPathId");

                    b.ToTable("LearningPath", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"), 1L, 1);

                    b.Property<int>("ChapterChapterId")
                        .HasColumnType("int")
                        .HasColumnName("Chapter_ChapterID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Video")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterChapterId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.LikeComment", b =>
                {
                    b.Property<int>("BlogCommentBlogCommentId")
                        .HasColumnType("int")
                        .HasColumnName("BlogComment_BlogCommentID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasIndex("BlogCommentBlogCommentId");

                    b.HasIndex("UserUserId");

                    b.ToTable("LikeComment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"), 1L, 1);

                    b.Property<string>("ContentFor")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LessonLessonId")
                        .HasColumnType("int")
                        .HasColumnName("Lesson_LessonID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("NoteId");

                    b.HasIndex("LessonLessonId");

                    b.HasIndex("UserUserId");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("ContentFor")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseCourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_CourseID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.HasKey("NotificationId");

                    b.HasIndex("CourseCourseId");

                    b.HasIndex("UserUserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("QuestionContent")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("QuizQuizId")
                        .HasColumnType("int")
                        .HasColumnName("Quiz_QuizID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizQuizId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuizID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LessonLessonId")
                        .HasColumnType("int")
                        .HasColumnName("Lesson_LessonID");

                    b.Property<string>("QuizName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("QuizId");

                    b.HasIndex("LessonLessonId");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.SaveBlog", b =>
                {
                    b.Property<int>("BlogBlogId")
                        .HasColumnType("int")
                        .HasColumnName("Blog_BlogID");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("SavedDay")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlogBlogId", "UserUserId");

                    b.HasIndex("UserUserId");

                    b.ToTable("SaveBlog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("CodeVerify")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FacebookID");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Github")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GithubId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GithubID");

                    b.Property<string>("GmailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GmailID");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserRoleRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRole_RoleID");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleRoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Answer", b =>
                {
                    b.HasOne("BusinessObject.Models.Question", "QuestionQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionQuestionId")
                        .HasConstraintName("FK_Answer_Question");

                    b.Navigation("QuestionQuestion");
                });

            modelBuilder.Entity("BusinessObject.Models.AskAndReply", b =>
                {
                    b.HasOne("BusinessObject.Models.Discuss", "DiscussDiscuss")
                        .WithMany("AskAndReplies")
                        .HasForeignKey("DiscussDiscussId")
                        .HasConstraintName("FK_AskAndReply_Discuss");

                    b.HasOne("BusinessObject.Models.AskAndReply", "ReplyForAsk")
                        .WithMany("InverseReplyForAsk")
                        .HasForeignKey("ReplyForAskId")
                        .HasConstraintName("FK_AskAndReply_AskAndReply");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("AskAndReplies")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_AskAndReply_User");

                    b.Navigation("DiscussDiscuss");

                    b.Navigation("ReplyForAsk");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.HasOne("BusinessObject.Models.BlogTag", "BlogTagBlogTag")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogTagBlogTagId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_BlogTag");

                    b.HasOne("BusinessObject.Models.BlogTopic", "BlogTopicBlogTopic")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogTopicBlogTopicId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_BlogTopic");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("Blogs")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_User");

                    b.Navigation("BlogTagBlogTag");

                    b.Navigation("BlogTopicBlogTopic");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogComment", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "BlogBlog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogBlogId")
                        .HasConstraintName("FK_BlogComment_Blog");

                    b.HasOne("BusinessObject.Models.BlogComment", "ReplyForComment")
                        .WithMany("InverseReplyForComment")
                        .HasForeignKey("ReplyForCommentId")
                        .HasConstraintName("FK_BlogComment_BlogComment");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_BlogComment_User");

                    b.Navigation("BlogBlog");

                    b.Navigation("ReplyForComment");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Chapter", b =>
                {
                    b.HasOne("BusinessObject.Models.Course", "CourseCourse")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Chapter_Course");

                    b.Navigation("CourseCourse");
                });

            modelBuilder.Entity("BusinessObject.Models.Course", b =>
                {
                    b.HasOne("BusinessObject.Models.LearningPath", "LearningPathLearningPath")
                        .WithMany("Courses")
                        .HasForeignKey("LearningPathLearningPathId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_LearningPath");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("Courses")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_User");

                    b.Navigation("LearningPathLearningPath");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.CourseEnrolled", b =>
                {
                    b.HasOne("BusinessObject.Models.Course", "CourseCourse")
                        .WithMany("CourseEnrolleds")
                        .HasForeignKey("CourseCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnrolled_Course");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("CourseEnrolleds")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnrolled_User");

                    b.Navigation("CourseCourse");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Discuss", b =>
                {
                    b.HasOne("BusinessObject.Models.Lesson", "LessonLesson")
                        .WithMany("Discusses")
                        .HasForeignKey("LessonLessonId")
                        .IsRequired()
                        .HasConstraintName("FK_Discuss_Lesson");

                    b.Navigation("LessonLesson");
                });

            modelBuilder.Entity("BusinessObject.Models.FeedBack", b =>
                {
                    b.HasOne("BusinessObject.Models.Course", "CourseCourse")
                        .WithMany("FeedBacks")
                        .HasForeignKey("CourseCourseId")
                        .HasConstraintName("FK_FeedBack_Course");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_FeedBack_User");

                    b.Navigation("CourseCourse");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Lesson", b =>
                {
                    b.HasOne("BusinessObject.Models.Chapter", "ChapterChapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterChapterId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_Chapter");

                    b.Navigation("ChapterChapter");
                });

            modelBuilder.Entity("BusinessObject.Models.LikeComment", b =>
                {
                    b.HasOne("BusinessObject.Models.BlogComment", "BlogCommentBlogComment")
                        .WithMany()
                        .HasForeignKey("BlogCommentBlogCommentId")
                        .IsRequired()
                        .HasConstraintName("FK_LikeComment_BlogComment");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany()
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_LikeComment_User");

                    b.Navigation("BlogCommentBlogComment");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Note", b =>
                {
                    b.HasOne("BusinessObject.Models.Lesson", "LessonLesson")
                        .WithMany("Notes")
                        .HasForeignKey("LessonLessonId")
                        .HasConstraintName("FK_Note_Lesson");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("Notes")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Note_User");

                    b.Navigation("LessonLesson");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.Course", "CourseCourse")
                        .WithMany("Notifications")
                        .HasForeignKey("CourseCourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Course");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("Notifications")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("CourseCourse");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.Question", b =>
                {
                    b.HasOne("BusinessObject.Models.Quiz", "QuizQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizQuizId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Quiz");

                    b.Navigation("QuizQuiz");
                });

            modelBuilder.Entity("BusinessObject.Models.Quiz", b =>
                {
                    b.HasOne("BusinessObject.Models.Lesson", "LessonLesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessonLessonId")
                        .HasConstraintName("FK_Quiz_Lesson");

                    b.Navigation("LessonLesson");
                });

            modelBuilder.Entity("BusinessObject.Models.SaveBlog", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "BlogBlog")
                        .WithMany("SaveBlogs")
                        .HasForeignKey("BlogBlogId")
                        .IsRequired()
                        .HasConstraintName("FK_SaveBlog_Blog");

                    b.HasOne("BusinessObject.Models.User", "UserUser")
                        .WithMany("SaveBlogs")
                        .HasForeignKey("UserUserId")
                        .IsRequired()
                        .HasConstraintName("FK_SaveBlog_User");

                    b.Navigation("BlogBlog");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.HasOne("BusinessObject.Models.UserRole", "UserRoleRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserRole");

                    b.Navigation("UserRoleRole");
                });

            modelBuilder.Entity("BusinessObject.Models.AskAndReply", b =>
                {
                    b.Navigation("InverseReplyForAsk");
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("SaveBlogs");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogComment", b =>
                {
                    b.Navigation("InverseReplyForComment");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogTag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogTopic", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BusinessObject.Models.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BusinessObject.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("CourseEnrolleds");

                    b.Navigation("FeedBacks");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BusinessObject.Models.Discuss", b =>
                {
                    b.Navigation("AskAndReplies");
                });

            modelBuilder.Entity("BusinessObject.Models.LearningPath", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BusinessObject.Models.Lesson", b =>
                {
                    b.Navigation("Discusses");

                    b.Navigation("Notes");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("BusinessObject.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BusinessObject.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("AskAndReplies");

                    b.Navigation("BlogComments");

                    b.Navigation("Blogs");

                    b.Navigation("CourseEnrolleds");

                    b.Navigation("Courses");

                    b.Navigation("FeedBacks");

                    b.Navigation("Notes");

                    b.Navigation("Notifications");

                    b.Navigation("SaveBlogs");
                });

            modelBuilder.Entity("BusinessObject.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
